# Default values for ai-flash-cards.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

frontend:
  image:
    registry: ""
    repository: ai-flash-cards-frontend
    pullPolicy: Never
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  service:
    name: frontend-service
    type: ClusterIP
    targetPort: 80
    port: 80
  livenessProbe:
    httpGet:
      path: /livez
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 30
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /readyz
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 30
    failureThreshold: 2
  config:
    name: frontend-config
    data:
      nodeEnv: production
  resources: {}
  volumeMounts: []
  volumes: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  replicaCount: 4
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}

backend:
  image:
    registry: ""
    repository: ai-flash-cards-backend
    pullPolicy: Never
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  service:
    name: backend-service
    type: ClusterIP
    targetPort: 8000
    port: 8000
  readinessProbe:
    httpGet:
      path: /service/readyz
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 2
  livenessProbe:
    httpGet:
      path: /service/livez
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 30
    failureThreshold: 2
  config:
    name: backend-config
    data:
      awsDefaultRegion: "" # TODO: Fill in
      bucketName: "" # TODO: Fill in
      cloudfrontUrl: "" # TODO: Fill in
      nodeEnv: production
      appEnv: kubernetes
  secret:
    name: api-secret
    type: Opaque
    data:
      awsAccessKeyId: "" # TODO: (Optional) Fill in 
      awsSecretAccessKey: "" # TODO: (Optional) Fill in
      awsSessionToken: "" # TODO:(Optional) Fill in
      openaiApiKey: "" # TODO: Fill in
  resources: {}
  volumeMounts: []
  volumes: []
  nodeSelector: {}
  tolerations: []
  affinity: {}
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  replicaCount: 4
  podAnnotations: {}
  podLabels: {}
  podSecurityContext: {}

ingress:
  name: main-ingress
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  hosts:
    - host: demo.localdev.me
      paths:
        - path: /?(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: frontend-service
              port:
                number: 80
        - path: /backend/?(.*)
          pathType: ImplementationSpecific
          backend:
            service:
              name: backend-service
              port:
                number: 8000
  tls:
  - hosts:
    - demo.localdev.me
    secretName: nginx-ingress-cert

service:
  type: ClusterIP
  targetPort: 80
  port: 80

livenessProbe:
  httpGet:
    path: /healthz
    containerPort: 80
readinessProbe:
  httpGet:
    path: /
    port: http
